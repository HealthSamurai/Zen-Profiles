{ns pdex.v1.pdex-provenance,
 import #{pdex.v1.ProvenanceSourceFrom aidbox-fx fhir aidbox},
 Provenance
 {:format :fhir,
  :zen/tags #{zen/schema aidbox/profile},
  :require #{:recorded :agent :target},
  :type zen/map,
  :zen/desc
  "Provenance is provided by the payer to identify the source of the information, whether the data came via a clinical record or a claim record and whether the data was subject to manual transcription or other interpretive transformation. This profile adds PayerSourceFormat as an extension on the entity base element.",
  :resourceType "Provenance",
  :keys
  {:meta {:confirms #{Provenance.meta}},
   :signature {:confirms #{Provenance.signature}},
   :implicitRules {:confirms #{Provenance.implicitRules}},
   :occurredDateTime {:confirms #{fhir/dateTime}},
   :resourceType {:type zen/string, :const {:value "Provenance"}},
   :recorded {:confirms #{Provenance.recorded}},
   :agent {:confirms #{Provenance.agent}},
   :policy {:confirms #{Provenance.policy}},
   :reason {:confirms #{Provenance.reason}},
   :activity {:confirms #{Provenance.activity}},
   :extension {:confirms #{Provenance.extension}},
   :contained {:confirms #{Provenance.contained}},
   :language {:confirms #{Provenance.language}},
   :id {:confirms #{Provenance.id}},
   :target {:confirms #{Provenance.target}},
   :location {:confirms #{Provenance.location}},
   :entity {:confirms #{Provenance.entity}},
   :modifierExtension {:confirms #{Provenance.modifierExtension}},
   :occurredPeriod {:confirms #{fhir/Period}},
   :text {:confirms #{Provenance.text}}},
  :exclusive-keys #{#{:occurredDateTime :occurredPeriod}},
  :severity "supported",
  :validation-type :open,
  :profile-definition
  "http://hl7.org/fhir/us/davinci-pdex/StructureDefinition/pdex-provenance"},
 Provenance.activity
 {:zen/desc
  "An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/CodeableConcept}},
 Provenance.agent
 {:minItems 1,
  :zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.agent.*}},
  :slicing
  {:slices
   {"ProvenanceTransmitter"
    {:filter
     {:engine :proto.zen.core/zen,
      :zen {:confirms #{Provenance.agent:ProvenanceTransmitter.*}}},
     :schema {:confirms #{Provenance.agent:ProvenanceTransmitter}}},
    "ProvenanceAuthor"
    {:filter
     {:engine :proto.zen.core/zen,
      :zen {:confirms #{Provenance.agent:ProvenanceAuthor.*}}},
     :schema {:confirms #{Provenance.agent:ProvenanceAuthor}}}}}},
 Provenance.agent.*
 {:confirms #{fhir/BackboneElement},
  :zen/tags #{zen/schema},
  :require #{:who},
  :type zen/map,
  :zen/desc
  "An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.",
  :keys
  {:who {:confirms #{Provenance.agent.who}},
   :id {:confirms #{Provenance.agent.id}},
   :type {:confirms #{Provenance.agent.type}},
   :onBehalfOf {:confirms #{Provenance.agent.onBehalfOf}},
   :modifierExtension
   {:confirms #{Provenance.agent.modifierExtension}},
   :extension {:confirms #{Provenance.agent.extension}},
   :role {:confirms #{Provenance.agent.role}}}},
 Provenance.agent.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.agent.extension.*}}},
 Provenance.agent.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Provenance.agent.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Provenance.agent.modifierExtension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.agent.modifierExtension.*}}},
 Provenance.agent.modifierExtension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself)."},
 Provenance.agent.onBehalfOf
 {:zen/desc
  "The individual, device, or organization for whom the change was made.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Reference}},
 Provenance.agent.role
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.agent.role.*}}},
 Provenance.agent.role.*
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :zen/desc
  "The function of the agent with respect to the activity. The security role enabling the agent with respect to the activity."},
 Provenance.agent.type
 {:zen/desc
  "The participation the agent had with respect to the activity.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/CodeableConcept}},
 Provenance.agent.who
 {:zen/desc
  "The individual, device or organization that participated in the event.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Reference}},
 Provenance.agent:ProvenanceAuthor
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.agent:ProvenanceAuthor.*}}},
 Provenance.agent:ProvenanceAuthor.*
 {:confirms #{fhir/BackboneElement},
  :zen/tags #{zen/schema},
  :require #{:who :type},
  :type zen/map,
  :zen/desc
  "An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.",
  :keys
  {:role {:confirms #{Provenance.agent:ProvenanceAuthor.role}},
   :modifierExtension
   {:confirms #{Provenance.agent:ProvenanceAuthor.modifierExtension}},
   :extension
   {:confirms #{Provenance.agent:ProvenanceAuthor.extension}},
   :onBehalfOf
   {:confirms #{Provenance.agent:ProvenanceAuthor.onBehalfOf}},
   :id {:confirms #{Provenance.agent:ProvenanceAuthor.id}},
   :who {:confirms #{Provenance.agent:ProvenanceAuthor.who}},
   :type {:confirms #{Provenance.agent:ProvenanceAuthor.type}}}},
 Provenance.agent:ProvenanceAuthor.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.agent:ProvenanceAuthor.extension.*}}},
 Provenance.agent:ProvenanceAuthor.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Provenance.agent:ProvenanceAuthor.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Provenance.agent:ProvenanceAuthor.modifierExtension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every
  {:confirms
   #{Provenance.agent:ProvenanceAuthor.modifierExtension.*}}},
 Provenance.agent:ProvenanceAuthor.modifierExtension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself)."},
 Provenance.agent:ProvenanceAuthor.onBehalfOf
 {:zen/desc
  "The individual, device, or organization for whom the change was made.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Reference}},
 Provenance.agent:ProvenanceAuthor.role
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.agent:ProvenanceAuthor.role.*}}},
 Provenance.agent:ProvenanceAuthor.role.*
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :zen/desc
  "The function of the agent with respect to the activity. The security role enabling the agent with respect to the activity."},
 Provenance.agent:ProvenanceAuthor.type
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :type zen/map,
  :zen/desc
  "The participation the agent had with respect to the activity.",
  :keys
  {:coding
   {:type zen/vector,
    :slicing
    {:slices
     {"RESERVED-aidbox-array-pattern-slicing-0"
      {:filter
       {:engine :zen,
        :zen
        {:type zen/map,
         :validation-type :open,
         :keys
         {:system
          {:const
           {:value
            "http://terminology.hl7.org/CodeSystem/provenance-participant-type"}},
          :code {:const {:value "author"}}}}},
       :schema {:type zen/vector, :minItems 1}}}}}},
  :validation-type :open},
 Provenance.agent:ProvenanceAuthor.who
 {:zen/desc
  "The individual, device or organization that participated in the event.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Reference}},
 Provenance.agent:ProvenanceTransmitter
 {:maxItems 1,
  :zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.agent:ProvenanceTransmitter.*}}},
 Provenance.agent:ProvenanceTransmitter.*
 {:confirms #{fhir/BackboneElement},
  :zen/tags #{zen/schema},
  :require #{:who :type},
  :type zen/map,
  :zen/desc "The entity that provided the copy to your system.",
  :keys
  {:modifierExtension
   {:confirms
    #{Provenance.agent:ProvenanceTransmitter.modifierExtension}},
   :extension
   {:confirms #{Provenance.agent:ProvenanceTransmitter.extension}},
   :role {:confirms #{Provenance.agent:ProvenanceTransmitter.role}},
   :who {:confirms #{Provenance.agent:ProvenanceTransmitter.who}},
   :id {:confirms #{Provenance.agent:ProvenanceTransmitter.id}},
   :type {:confirms #{Provenance.agent:ProvenanceTransmitter.type}},
   :onBehalfOf
   {:confirms #{Provenance.agent:ProvenanceTransmitter.onBehalfOf}}}},
 Provenance.agent:ProvenanceTransmitter.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every
  {:confirms #{Provenance.agent:ProvenanceTransmitter.extension.*}}},
 Provenance.agent:ProvenanceTransmitter.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Provenance.agent:ProvenanceTransmitter.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Provenance.agent:ProvenanceTransmitter.modifierExtension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every
  {:confirms
   #{Provenance.agent:ProvenanceTransmitter.modifierExtension.*}}},
 Provenance.agent:ProvenanceTransmitter.modifierExtension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself)."},
 Provenance.agent:ProvenanceTransmitter.onBehalfOf
 {:zen/desc
  "The individual, device, or organization for whom the change was made.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Reference}},
 Provenance.agent:ProvenanceTransmitter.role
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.agent:ProvenanceTransmitter.role.*}}},
 Provenance.agent:ProvenanceTransmitter.role.*
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :zen/desc
  "The function of the agent with respect to the activity. The security role enabling the agent with respect to the activity."},
 Provenance.agent:ProvenanceTransmitter.type
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :type zen/map,
  :zen/desc
  "The participation the agent had with respect to the activity.",
  :keys
  {:coding
   {:type zen/vector,
    :slicing
    {:slices
     {"RESERVED-aidbox-array-pattern-slicing-0"
      {:filter
       {:engine :zen,
        :zen
        {:type zen/map,
         :validation-type :open,
         :keys
         {:system
          {:const
           {:value
            "http://hl7.org/fhir/us/core/CodeSystem/us-core-provenance-participant-type"}},
          :code {:const {:value "transmitter"}}}}},
       :schema {:type zen/vector, :minItems 1}}}}}},
  :validation-type :open},
 Provenance.agent:ProvenanceTransmitter.who
 {:zen/desc
  "The individual, device or organization that participated in the event.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Reference}},
 Provenance.contained
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.contained.*}}},
 Provenance.contained.*
 {:confirms #{fhir/Resource},
  :zen/tags #{zen/schema},
  :zen/desc
  "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope."},
 Provenance.entity
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.entity.*}}},
 Provenance.entity.*
 {:confirms #{fhir/BackboneElement},
  :zen/tags #{zen/schema},
  :require #{:role :what},
  :type zen/map,
  :zen/desc "An entity used in this activity.",
  :keys
  {:what {:confirms #{Provenance.entity.what}},
   :agent {:confirms #{Provenance.entity.agent}},
   :modifierExtension
   {:confirms #{Provenance.entity.modifierExtension}},
   :role {:confirms #{Provenance.entity.role}},
   :extension {:confirms #{Provenance.entity.extension}},
   :id {:confirms #{Provenance.entity.id}}}},
 Provenance.entity.agent
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.entity.agent.*}}},
 Provenance.entity.agent.*
 #:zen{:desc
       "The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity.",
       :tags #{zen/schema}},
 Provenance.entity.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.entity.extension.*}},
  :slicing
  {:slices
   {"sourceFormat"
    {:filter
     {:engine :proto.zen.core/zen,
      :zen {:confirms #{Provenance.entity.extension:sourceFormat.*}}},
     :schema
     {:confirms #{Provenance.entity.extension:sourceFormat}}}}}},
 Provenance.entity.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc "An Extension"},
 Provenance.entity.extension:sourceFormat
 {:maxItems 1,
  :zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.entity.extension:sourceFormat.*}}},
 Provenance.entity.extension:sourceFormat.*
 {:confirms #{pdex.v1.ProvenanceSourceFrom/Extension},
  :zen/tags #{zen/schema},
  :require #{:url},
  :type zen/map,
  :zen/desc "Optional Extension Element - found in all resources.",
  :keys
  {:valueCodeableConcept
   {:confirms
    #{Provenance.entity.extension:sourceFormat.valueCodeableConcept
      fhir/CodeableConcept}},
   :url {:confirms #{Provenance.entity.extension:sourceFormat.url}},
   :extension
   {:confirms #{Provenance.entity.extension:sourceFormat.extension}},
   :id {:confirms #{Provenance.entity.extension:sourceFormat.id}}}},
 Provenance.entity.extension:sourceFormat.extension
 {:maxItems 0,
  :zen/tags #{zen/schema},
  :type zen/vector,
  :every
  {:confirms #{Provenance.entity.extension:sourceFormat.extension.*}},
  :slicing {:slices {}}},
 Provenance.entity.extension:sourceFormat.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc "An Extension"},
 Provenance.entity.extension:sourceFormat.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Provenance.entity.extension:sourceFormat.url
 {:confirms #{fhir/uri},
  :zen/tags #{zen/schema},
  :zen/desc
  "Source of the definition for the extension code - a logical name or a URL.",
  :const
  {:value
   "http://hl7.org/fhir/us/davinci-pdex/StructureDefinition/ProvenanceSourceFrom"}},
 Provenance.entity.extension:sourceFormat.valueCodeableConcept
 {aidbox-fx/valueset
  Provenance.entity.extension:sourceFormat.valueCodeableConcept.valueset,
  :confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :zen/desc
  "Value of extension - must be one of a constrained set of the data types (see [Extensibility](http://hl7.org/fhir/R4/extensibility.html) for a list)."},
 Provenance.entity.extension:sourceFormat.valueCodeableConcept.valueset
 {:zen/tags
  #{aidbox-fx/valueset-definition
    aidbox-fx/legacy-fhir-valueset-definition},
  :engine :legacy-fhir-valueset,
  :valueset-url
  "http://hl7.org/fhir/us/davinci-pdex/ValueSet/ProvenancePayerSourceFormat"},
 Provenance.entity.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Provenance.entity.modifierExtension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.entity.modifierExtension.*}}},
 Provenance.entity.modifierExtension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself)."},
 Provenance.entity.role
 {aidbox-fx/valueset Provenance.entity.role.valueset,
  :confirms #{fhir/code},
  :zen/tags #{zen/schema},
  :zen/desc "How the entity was used during the activity."},
 Provenance.entity.role.valueset
 {:zen/tags
  #{aidbox-fx/valueset-definition
    aidbox-fx/legacy-fhir-valueset-definition},
  :engine :legacy-fhir-valueset,
  :valueset-url "http://hl7.org/fhir/ValueSet/provenance-entity-role"},
 Provenance.entity.what
 {:zen/desc
  "Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Reference}},
 Provenance.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.extension.*}}},
 Provenance.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Provenance.id
 {:zen/desc
  "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Provenance.implicitRules
 {:zen/desc
  "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/uri}},
 Provenance.language
 {:zen/desc "The base language in which the resource is written.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/code}},
 Provenance.location
 {:zen/desc "Where the activity occurred, if relevant.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Reference}},
 Provenance.meta
 {:zen/desc
  "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Meta}},
 Provenance.modifierExtension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.modifierExtension.*}}},
 Provenance.modifierExtension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself)."},
 Provenance.policy
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.policy.*}}},
 Provenance.policy.*
 {:confirms #{fhir/uri},
  :zen/tags #{zen/schema},
  :zen/desc
  "Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc."},
 Provenance.reason
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.reason.*}}},
 Provenance.reason.*
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :zen/desc "The reason that the activity was taking place."},
 Provenance.recorded
 {:zen/desc "The instant of time at which the activity was recorded.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/instant}},
 Provenance.signature
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.signature.*}}},
 Provenance.signature.*
 {:confirms #{fhir/Signature},
  :zen/tags #{zen/schema},
  :zen/desc
  "A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated."},
 Provenance.target
 {:minItems 1,
  :zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Provenance.target.*}}},
 Provenance.target.*
 {:confirms #{fhir/Reference},
  :zen/tags #{zen/schema},
  :zen/desc
  "The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity."},
 Provenance.text
 {:zen/desc
  "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Narrative}}}