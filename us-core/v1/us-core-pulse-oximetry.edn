{ns us-core.v1.us-core-pulse-oximetry,
 import #{aidbox-fx fhir aidbox},
 Observation
 {:format :fhir,
  :zen/tags #{zen/schema aidbox/profile},
  :require
  #{:category :status :code #{:effectiveDateTime :effectivePeriod}
    :subject},
  :type zen/map,
  :zen/desc
  "Defines constraints and extensions on the Observation resource for use in querying and retrieving inspired O2 by pulse oximetry observations.",
  :resourceType "Observation",
  :keys
  {:category {:confirms #{Observation.category}},
   :referenceRange {:confirms #{Observation.referenceRange}},
   :hasMember {:confirms #{Observation.hasMember}},
   :meta {:confirms #{Observation.meta}},
   :derivedFrom {:confirms #{Observation.derivedFrom}},
   :interpretation {:confirms #{Observation.interpretation}},
   :encounter {:confirms #{Observation.encounter}},
   :method {:confirms #{Observation.method}},
   :specimen {:confirms #{Observation.specimen}},
   :valueQuantity
   {:confirms #{Observation.valueQuantity fhir/Quantity}},
   :implicitRules {:confirms #{Observation.implicitRules}},
   :resourceType {:type zen/string, :const {:value "Observation"}},
   :component {:confirms #{Observation.component}},
   :note {:confirms #{Observation.note}},
   :extension {:confirms #{Observation.extension}},
   :contained {:confirms #{Observation.contained}},
   :effectiveDateTime {:confirms #{fhir/dateTime}},
   :status {:confirms #{Observation.status}},
   :language {:confirms #{Observation.language}},
   :id {:confirms #{Observation.id}},
   :code {:confirms #{Observation.code}},
   :identifier {:confirms #{Observation.identifier}},
   :bodySite {:confirms #{Observation.bodySite}},
   :focus {:confirms #{Observation.focus}},
   :issued {:confirms #{Observation.issued}},
   :device {:confirms #{Observation.device}},
   :basedOn {:confirms #{Observation.basedOn}},
   :partOf {:confirms #{Observation.partOf}},
   :subject {:confirms #{Observation.subject}},
   :modifierExtension {:confirms #{Observation.modifierExtension}},
   :performer {:confirms #{Observation.performer}},
   :dataAbsentReason {:confirms #{Observation.dataAbsentReason}},
   :effectivePeriod {:confirms #{fhir/Period}},
   :text {:confirms #{Observation.text}}},
  :exclusive-keys #{#{:effectiveDateTime :effectivePeriod}},
  :severity "supported",
  :validation-type :open,
  :profile-definition
  "http://hl7.org/fhir/us/core/StructureDefinition/us-core-pulse-oximetry"},
 Observation.basedOn
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.basedOn.*}}},
 Observation.basedOn.*
 {:confirms #{fhir/Reference},
  :zen/tags #{zen/schema},
  :zen/desc
  "A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed."},
 Observation.bodySite
 {:zen/desc
  "Indicates the site on the subject's body where the observation was made (i.e. the target site).",
  :zen/tags #{zen/schema},
  :confirms #{fhir/CodeableConcept}},
 Observation.category
 {:minItems 1,
  :zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.category.*}},
  :slicing
  {:slices
   {"VSCat"
    {:filter
     {:engine :proto.zen.core/zen,
      :zen {:confirms #{Observation.category:VSCat.*}}},
     :schema {:confirms #{Observation.category:VSCat}}}}}},
 Observation.category.*
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :zen/desc
  "A code that classifies the general type of observation being made."},
 Observation.category:VSCat
 {:minItems 1,
  :maxItems 1,
  :zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.category:VSCat.*}}},
 Observation.category:VSCat.*
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :require #{:coding},
  :type zen/map,
  :zen/desc
  "A code that classifies the general type of observation being made.",
  :keys
  {:coding {:confirms #{Observation.category:VSCat.coding}},
   :id {:confirms #{Observation.category:VSCat.id}},
   :text {:confirms #{Observation.category:VSCat.text}},
   :extension {:confirms #{Observation.category:VSCat.extension}}}},
 Observation.category:VSCat.coding
 {:minItems 1,
  :zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.category:VSCat.coding.*}}},
 Observation.category:VSCat.coding.*
 {:confirms #{fhir/Coding},
  :zen/tags #{zen/schema},
  :require #{:system :code},
  :type zen/map,
  :zen/desc "A reference to a code defined by a terminology system.",
  :keys
  {:system {:confirms #{Observation.category:VSCat.coding.system}},
   :extension
   {:confirms #{Observation.category:VSCat.coding.extension}},
   :id {:confirms #{Observation.category:VSCat.coding.id}},
   :display {:confirms #{Observation.category:VSCat.coding.display}},
   :code {:confirms #{Observation.category:VSCat.coding.code}},
   :userSelected
   {:confirms #{Observation.category:VSCat.coding.userSelected}},
   :version {:confirms #{Observation.category:VSCat.coding.version}}}},
 Observation.category:VSCat.coding.code
 {:confirms #{fhir/code},
  :zen/tags #{zen/schema},
  :zen/desc
  "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
  :const {:value "vital-signs"}},
 Observation.category:VSCat.coding.display
 {:zen/desc
  "A representation of the meaning of the code in the system, following the rules of the system.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.category:VSCat.coding.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.category:VSCat.coding.extension.*}},
  :slicing {:slices {}}},
 Observation.category:VSCat.coding.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Observation.category:VSCat.coding.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.category:VSCat.coding.system
 {:confirms #{fhir/uri},
  :zen/tags #{zen/schema},
  :zen/desc
  "The identification of the code system that defines the meaning of the symbol in the code.",
  :const
  {:value
   "http://terminology.hl7.org/CodeSystem/observation-category"}},
 Observation.category:VSCat.coding.userSelected
 {:zen/desc
  "Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).",
  :zen/tags #{zen/schema},
  :confirms #{fhir/boolean}},
 Observation.category:VSCat.coding.version
 {:zen/desc
  "The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.category:VSCat.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.category:VSCat.extension.*}},
  :slicing {:slices {}}},
 Observation.category:VSCat.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Observation.category:VSCat.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.category:VSCat.text
 {:zen/desc
  "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.code
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :type zen/map,
  :zen/desc "Oxygen Saturation.",
  :keys
  {:text {:confirms #{Observation.code.text}},
   :extension {:confirms #{Observation.code.extension}},
   :coding {:confirms #{Observation.code.coding}},
   :id {:confirms #{Observation.code.id}}}},
 Observation.code.coding
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.code.coding.*}},
  :slicing
  {:slices
   {"OxygenSatCode"
    {:filter
     {:engine :proto.zen.core/zen,
      :zen {:confirms #{Observation.code.coding:OxygenSatCode.*}}},
     :schema {:confirms #{Observation.code.coding:OxygenSatCode}}},
    "PulseOx"
    {:filter
     {:engine :proto.zen.core/zen,
      :zen {:confirms #{Observation.code.coding:PulseOx.*}}},
     :schema {:confirms #{Observation.code.coding:PulseOx}}}}}},
 Observation.code.coding.*
 {:confirms #{fhir/Coding},
  :zen/tags #{zen/schema},
  :zen/desc "A reference to a code defined by a terminology system."},
 Observation.code.coding:OxygenSatCode
 {:minItems 1,
  :maxItems 1,
  :zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.code.coding:OxygenSatCode.*}}},
 Observation.code.coding:OxygenSatCode.*
 {:confirms #{fhir/Coding},
  :zen/tags #{zen/schema},
  :require #{:system :code},
  :type zen/map,
  :zen/desc "A reference to a code defined by a terminology system.",
  :keys
  {:display
   {:confirms #{Observation.code.coding:OxygenSatCode.display}},
   :userSelected
   {:confirms #{Observation.code.coding:OxygenSatCode.userSelected}},
   :code {:confirms #{Observation.code.coding:OxygenSatCode.code}},
   :extension
   {:confirms #{Observation.code.coding:OxygenSatCode.extension}},
   :system {:confirms #{Observation.code.coding:OxygenSatCode.system}},
   :id {:confirms #{Observation.code.coding:OxygenSatCode.id}},
   :version
   {:confirms #{Observation.code.coding:OxygenSatCode.version}}}},
 Observation.code.coding:OxygenSatCode.code
 {:confirms #{fhir/code},
  :zen/tags #{zen/schema},
  :zen/desc
  "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
  :const {:value "2708-6"}},
 Observation.code.coding:OxygenSatCode.display
 {:zen/desc
  "A representation of the meaning of the code in the system, following the rules of the system.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.code.coding:OxygenSatCode.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every
  {:confirms #{Observation.code.coding:OxygenSatCode.extension.*}},
  :slicing {:slices {}}},
 Observation.code.coding:OxygenSatCode.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Observation.code.coding:OxygenSatCode.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.code.coding:OxygenSatCode.system
 {:confirms #{fhir/uri},
  :zen/tags #{zen/schema},
  :zen/desc
  "The identification of the code system that defines the meaning of the symbol in the code.",
  :const {:value "http://loinc.org"}},
 Observation.code.coding:OxygenSatCode.userSelected
 {:zen/desc
  "Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).",
  :zen/tags #{zen/schema},
  :confirms #{fhir/boolean}},
 Observation.code.coding:OxygenSatCode.version
 {:zen/desc
  "The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.code.coding:PulseOx
 {:minItems 1,
  :maxItems 1,
  :zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.code.coding:PulseOx.*}}},
 Observation.code.coding:PulseOx.*
 {:confirms #{fhir/Coding},
  :zen/tags #{zen/schema},
  :require #{:system :code},
  :type zen/map,
  :zen/desc "A reference to a code defined by a terminology system.",
  :keys
  {:display {:confirms #{Observation.code.coding:PulseOx.display}},
   :userSelected
   {:confirms #{Observation.code.coding:PulseOx.userSelected}},
   :id {:confirms #{Observation.code.coding:PulseOx.id}},
   :extension {:confirms #{Observation.code.coding:PulseOx.extension}},
   :code {:confirms #{Observation.code.coding:PulseOx.code}},
   :system {:confirms #{Observation.code.coding:PulseOx.system}},
   :version {:confirms #{Observation.code.coding:PulseOx.version}}}},
 Observation.code.coding:PulseOx.code
 {:confirms #{fhir/code},
  :zen/tags #{zen/schema},
  :zen/desc
  "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
  :const {:value "59408-5"}},
 Observation.code.coding:PulseOx.display
 {:zen/desc
  "A representation of the meaning of the code in the system, following the rules of the system.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.code.coding:PulseOx.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.code.coding:PulseOx.extension.*}},
  :slicing {:slices {}}},
 Observation.code.coding:PulseOx.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Observation.code.coding:PulseOx.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.code.coding:PulseOx.system
 {:confirms #{fhir/uri},
  :zen/tags #{zen/schema},
  :zen/desc
  "The identification of the code system that defines the meaning of the symbol in the code.",
  :const {:value "http://loinc.org"}},
 Observation.code.coding:PulseOx.userSelected
 {:zen/desc
  "Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).",
  :zen/tags #{zen/schema},
  :confirms #{fhir/boolean}},
 Observation.code.coding:PulseOx.version
 {:zen/desc
  "The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.code.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.code.extension.*}},
  :slicing {:slices {}}},
 Observation.code.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Observation.code.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.code.text
 {:zen/desc
  "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.component
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.component.*}},
  :slicing
  {:slices
   {"Concentration"
    {:filter
     {:engine :proto.zen.core/zen,
      :zen {:confirms #{Observation.component:Concentration.*}}},
     :schema {:confirms #{Observation.component:Concentration}}},
    "FlowRate"
    {:filter
     {:engine :proto.zen.core/zen,
      :zen {:confirms #{Observation.component:FlowRate.*}}},
     :schema {:confirms #{Observation.component:FlowRate}}}}}},
 Observation.component.*
 {:confirms #{fhir/BackboneElement},
  :zen/tags #{zen/schema},
  :require #{:code},
  :type zen/map,
  :zen/desc
  "Used when reporting systolic and diastolic blood pressure.",
  :keys
  {:referenceRange {:confirms #{Observation.component.referenceRange}},
   :interpretation {:confirms #{Observation.component.interpretation}},
   :valueTime {:confirms #{fhir/time}},
   :valueQuantity {:confirms #{fhir/Quantity}},
   :valueString {:confirms #{fhir/string}},
   :valueRatio {:confirms #{fhir/Ratio}},
   :valueBoolean {:confirms #{fhir/boolean}},
   :valueDateTime {:confirms #{fhir/dateTime}},
   :extension {:confirms #{Observation.component.extension}},
   :valueSampledData {:confirms #{fhir/SampledData}},
   :id {:confirms #{Observation.component.id}},
   :code {:confirms #{Observation.component.code}},
   :valueCodeableConcept {:confirms #{fhir/CodeableConcept}},
   :valuePeriod {:confirms #{fhir/Period}},
   :valueRange {:confirms #{fhir/Range}},
   :valueInteger {:confirms #{fhir/integer}},
   :modifierExtension
   {:confirms #{Observation.component.modifierExtension}},
   :dataAbsentReason
   {:confirms #{Observation.component.dataAbsentReason}}},
  :exclusive-keys
  #{#{:valueTime :valueQuantity :valueString :valueRatio :valueBoolean
      :valueDateTime :valueSampledData :valueCodeableConcept
      :valuePeriod :valueRange :valueInteger}}},
 Observation.component.code
 {:zen/desc
  "Describes what was observed. Sometimes this is called the observation \"code\".",
  :zen/tags #{zen/schema},
  :confirms #{fhir/CodeableConcept}},
 Observation.component.dataAbsentReason
 {:zen/desc
  "Provides a reason why the expected value in the element Observation.component.value[x] is missing.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/CodeableConcept}},
 Observation.component.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.component.extension.*}}},
 Observation.component.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Observation.component.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.component.interpretation
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.component.interpretation.*}}},
 Observation.component.interpretation.*
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :zen/desc
  "A categorical assessment of an observation value.  For example, high, low, normal."},
 Observation.component.modifierExtension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.component.modifierExtension.*}}},
 Observation.component.modifierExtension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself)."},
 Observation.component.referenceRange
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.component.referenceRange.*}}},
 Observation.component.referenceRange.*
 #:zen{:desc
       "Guidance on how to interpret the value by comparison to a normal or recommended range.",
       :tags #{zen/schema}},
 Observation.component.value_x_.valueset
 {:zen/tags
  #{aidbox-fx/valueset-definition
    aidbox-fx/legacy-fhir-valueset-definition},
  :engine :legacy-fhir-valueset,
  :valueset-url "http://hl7.org/fhir/ValueSet/ucum-vitals-common"},
 Observation.component:Concentration
 {:maxItems 1,
  :zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.component:Concentration.*}}},
 Observation.component:Concentration.*
 {:confirms #{fhir/BackboneElement},
  :zen/tags #{zen/schema},
  :require #{:system :unit :value :code},
  :type zen/map,
  :zen/desc
  "Used when reporting systolic and diastolic blood pressure.",
  :keys
  {:referenceRange
   {:confirms #{Observation.component:Concentration.referenceRange}},
   :system {:confirms #{Observation.component:Concentration.system}},
   :unit {:confirms #{Observation.component:Concentration.unit}},
   :interpretation
   {:confirms #{Observation.component:Concentration.interpretation}},
   :valueQuantity {:confirms #{fhir/Quantity}},
   :value {:confirms #{Observation.component:Concentration.value}},
   :extension
   {:confirms #{Observation.component:Concentration.extension}},
   :id {:confirms #{Observation.component:Concentration.id}},
   :code {:confirms #{Observation.component:Concentration.code}},
   :comparator
   {:confirms #{Observation.component:Concentration.comparator}},
   :modifierExtension
   {:confirms
    #{Observation.component:Concentration.modifierExtension}},
   :dataAbsentReason
   {:confirms
    #{Observation.component:Concentration.dataAbsentReason}}}},
 Observation.component:Concentration.code
 {:confirms #{fhir/code},
  :zen/tags #{zen/schema},
  :zen/desc
  "A computer processable form of the unit in some unit representation system.",
  :const {:value "%"}},
 Observation.component:Concentration.comparator
 {aidbox-fx/valueset
  Observation.component:Concentration.comparator.valueset,
  :confirms #{fhir/code},
  :zen/tags #{zen/schema},
  :zen/desc
  "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value."},
 Observation.component:Concentration.comparator.valueset
 {:zen/tags
  #{aidbox-fx/valueset-definition
    aidbox-fx/legacy-fhir-valueset-definition},
  :engine :legacy-fhir-valueset,
  :valueset-url "http://hl7.org/fhir/ValueSet/quantity-comparator"},
 Observation.component:Concentration.dataAbsentReason
 {:zen/desc
  "Provides a reason why the expected value in the element Observation.component.value[x] is missing.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/CodeableConcept}},
 Observation.component:Concentration.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every
  {:confirms #{Observation.component:Concentration.extension.*}},
  :slicing {:slices {}}},
 Observation.component:Concentration.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Observation.component:Concentration.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.component:Concentration.interpretation
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every
  {:confirms #{Observation.component:Concentration.interpretation.*}}},
 Observation.component:Concentration.interpretation.*
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :zen/desc
  "A categorical assessment of an observation value.  For example, high, low, normal."},
 Observation.component:Concentration.modifierExtension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every
  {:confirms
   #{Observation.component:Concentration.modifierExtension.*}}},
 Observation.component:Concentration.modifierExtension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself)."},
 Observation.component:Concentration.referenceRange
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every
  {:confirms #{Observation.component:Concentration.referenceRange.*}}},
 Observation.component:Concentration.referenceRange.*
 #:zen{:desc
       "Guidance on how to interpret the value by comparison to a normal or recommended range.",
       :tags #{zen/schema}},
 Observation.component:Concentration.system
 {:confirms #{fhir/uri},
  :zen/tags #{zen/schema},
  :zen/desc
  "The identification of the system that provides the coded form of the unit.",
  :const {:value "http://unitsofmeasure.org"}},
 Observation.component:Concentration.unit
 {:zen/desc "A human-readable form of the unit.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.component:Concentration.value
 {:zen/desc
  "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/decimal}},
 Observation.component:Concentration.value_x_.valueset
 {:zen/tags
  #{aidbox-fx/valueset-definition
    aidbox-fx/legacy-fhir-valueset-definition},
  :engine :legacy-fhir-valueset,
  :valueset-url "http://hl7.org/fhir/ValueSet/ucum-vitals-common"},
 Observation.component:FlowRate
 {:maxItems 1,
  :zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.component:FlowRate.*}}},
 Observation.component:FlowRate.*
 {:confirms #{fhir/BackboneElement},
  :zen/tags #{zen/schema},
  :require #{:system :unit :value :code},
  :type zen/map,
  :zen/desc
  "Used when reporting systolic and diastolic blood pressure.",
  :keys
  {:referenceRange
   {:confirms #{Observation.component:FlowRate.referenceRange}},
   :system {:confirms #{Observation.component:FlowRate.system}},
   :unit {:confirms #{Observation.component:FlowRate.unit}},
   :interpretation
   {:confirms #{Observation.component:FlowRate.interpretation}},
   :valueQuantity {:confirms #{fhir/Quantity}},
   :value {:confirms #{Observation.component:FlowRate.value}},
   :extension {:confirms #{Observation.component:FlowRate.extension}},
   :id {:confirms #{Observation.component:FlowRate.id}},
   :code {:confirms #{Observation.component:FlowRate.code}},
   :comparator
   {:confirms #{Observation.component:FlowRate.comparator}},
   :modifierExtension
   {:confirms #{Observation.component:FlowRate.modifierExtension}},
   :dataAbsentReason
   {:confirms #{Observation.component:FlowRate.dataAbsentReason}}}},
 Observation.component:FlowRate.code
 {:confirms #{fhir/code},
  :zen/tags #{zen/schema},
  :zen/desc
  "A computer processable form of the unit in some unit representation system.",
  :const {:value "L/min"}},
 Observation.component:FlowRate.comparator
 {aidbox-fx/valueset
  Observation.component:FlowRate.comparator.valueset,
  :confirms #{fhir/code},
  :zen/tags #{zen/schema},
  :zen/desc
  "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value."},
 Observation.component:FlowRate.comparator.valueset
 {:zen/tags
  #{aidbox-fx/valueset-definition
    aidbox-fx/legacy-fhir-valueset-definition},
  :engine :legacy-fhir-valueset,
  :valueset-url "http://hl7.org/fhir/ValueSet/quantity-comparator"},
 Observation.component:FlowRate.dataAbsentReason
 {:zen/desc
  "Provides a reason why the expected value in the element Observation.component.value[x] is missing.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/CodeableConcept}},
 Observation.component:FlowRate.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.component:FlowRate.extension.*}},
  :slicing {:slices {}}},
 Observation.component:FlowRate.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Observation.component:FlowRate.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.component:FlowRate.interpretation
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every
  {:confirms #{Observation.component:FlowRate.interpretation.*}}},
 Observation.component:FlowRate.interpretation.*
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :zen/desc
  "A categorical assessment of an observation value.  For example, high, low, normal."},
 Observation.component:FlowRate.modifierExtension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every
  {:confirms #{Observation.component:FlowRate.modifierExtension.*}}},
 Observation.component:FlowRate.modifierExtension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself)."},
 Observation.component:FlowRate.referenceRange
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every
  {:confirms #{Observation.component:FlowRate.referenceRange.*}}},
 Observation.component:FlowRate.referenceRange.*
 #:zen{:desc
       "Guidance on how to interpret the value by comparison to a normal or recommended range.",
       :tags #{zen/schema}},
 Observation.component:FlowRate.system
 {:confirms #{fhir/uri},
  :zen/tags #{zen/schema},
  :zen/desc
  "The identification of the system that provides the coded form of the unit.",
  :const {:value "http://unitsofmeasure.org"}},
 Observation.component:FlowRate.unit
 {:zen/desc "A human-readable form of the unit.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.component:FlowRate.value
 {:zen/desc
  "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/decimal}},
 Observation.component:FlowRate.value_x_.valueset
 {:zen/tags
  #{aidbox-fx/valueset-definition
    aidbox-fx/legacy-fhir-valueset-definition},
  :engine :legacy-fhir-valueset,
  :valueset-url "http://hl7.org/fhir/ValueSet/ucum-vitals-common"},
 Observation.contained
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.contained.*}}},
 Observation.contained.*
 {:confirms #{fhir/Resource},
  :zen/tags #{zen/schema},
  :zen/desc
  "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope."},
 Observation.dataAbsentReason
 {:zen/desc
  "Provides a reason why the expected value in the element Observation.value[x] is missing.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/CodeableConcept}},
 Observation.derivedFrom
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.derivedFrom.*}}},
 Observation.derivedFrom.*
 {:confirms #{fhir/Reference},
  :zen/tags #{zen/schema},
  :zen/desc
  "The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image."},
 Observation.device
 {:zen/desc "The device used to generate the observation data.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Reference}},
 Observation.encounter
 {:zen/desc
  "The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Reference}},
 Observation.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.extension.*}}},
 Observation.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Observation.focus
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.focus.*}}},
 Observation.focus.*
 {:confirms #{fhir/Reference},
  :zen/tags #{zen/schema},
  :zen/desc
  "The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus."},
 Observation.hasMember
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.hasMember.*}}},
 Observation.hasMember.*
 {:confirms #{fhir/Reference},
  :zen/tags #{zen/schema},
  :zen/desc "Used when reporting vital signs panel components."},
 Observation.id
 {:zen/desc
  "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.identifier
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.identifier.*}}},
 Observation.identifier.*
 {:confirms #{fhir/Identifier},
  :zen/tags #{zen/schema},
  :zen/desc "A unique identifier assigned to this observation."},
 Observation.implicitRules
 {:zen/desc
  "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/uri}},
 Observation.interpretation
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.interpretation.*}}},
 Observation.interpretation.*
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :zen/desc
  "A categorical assessment of an observation value.  For example, high, low, normal."},
 Observation.issued
 {:zen/desc
  "The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/instant}},
 Observation.language
 {:zen/desc "The base language in which the resource is written.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/code}},
 Observation.meta
 {:zen/desc
  "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Meta}},
 Observation.method
 {:zen/desc "Indicates the mechanism used to perform the observation.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/CodeableConcept}},
 Observation.modifierExtension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.modifierExtension.*}}},
 Observation.modifierExtension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself)."},
 Observation.note
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.note.*}}},
 Observation.note.*
 {:confirms #{fhir/Annotation},
  :zen/tags #{zen/schema},
  :zen/desc "Comments about the observation or the results."},
 Observation.partOf
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.partOf.*}}},
 Observation.partOf.*
 {:confirms #{fhir/Reference},
  :zen/tags #{zen/schema},
  :zen/desc
  "A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure."},
 Observation.performer
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.performer.*}}},
 Observation.performer.*
 {:confirms #{fhir/Reference},
  :zen/tags #{zen/schema},
  :zen/desc
  "Who was responsible for asserting the observed value as \"true\"."},
 Observation.referenceRange
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.referenceRange.*}}},
 Observation.referenceRange.*
 {:confirms #{fhir/BackboneElement},
  :zen/tags #{zen/schema},
  :type zen/map,
  :zen/desc
  "Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an \"OR\".   In other words, to represent two distinct target populations, two `referenceRange` elements would be used.",
  :keys
  {:age {:confirms #{Observation.referenceRange.age}},
   :appliesTo {:confirms #{Observation.referenceRange.appliesTo}},
   :type {:confirms #{Observation.referenceRange.type}},
   :high {:confirms #{Observation.referenceRange.high}},
   :extension {:confirms #{Observation.referenceRange.extension}},
   :id {:confirms #{Observation.referenceRange.id}},
   :low {:confirms #{Observation.referenceRange.low}},
   :modifierExtension
   {:confirms #{Observation.referenceRange.modifierExtension}},
   :text {:confirms #{Observation.referenceRange.text}}}},
 Observation.referenceRange.age
 {:zen/desc
  "The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Range}},
 Observation.referenceRange.appliesTo
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.referenceRange.appliesTo.*}}},
 Observation.referenceRange.appliesTo.*
 {:confirms #{fhir/CodeableConcept},
  :zen/tags #{zen/schema},
  :zen/desc
  "Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple `appliesTo`  are interpreted as an \"AND\" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used."},
 Observation.referenceRange.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.referenceRange.extension.*}}},
 Observation.referenceRange.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Observation.referenceRange.high
 {:zen/desc
  "The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Quantity}},
 Observation.referenceRange.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.referenceRange.low
 {:zen/desc
  "The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Quantity}},
 Observation.referenceRange.modifierExtension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every
  {:confirms #{Observation.referenceRange.modifierExtension.*}}},
 Observation.referenceRange.modifierExtension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself)."},
 Observation.referenceRange.text
 {:zen/desc
  "Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of \"Negative\" or a list or table of \"normals\".",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.referenceRange.type
 {:zen/desc
  "Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/CodeableConcept}},
 Observation.specimen
 {:zen/desc
  "The specimen that was used when this observation was made.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Reference}},
 Observation.status
 {aidbox-fx/valueset Observation.status.valueset,
  :confirms #{fhir/code},
  :zen/tags #{zen/schema},
  :zen/desc "The status of the result value."},
 Observation.status.valueset
 {:zen/tags
  #{aidbox-fx/valueset-definition
    aidbox-fx/legacy-fhir-valueset-definition},
  :engine :legacy-fhir-valueset,
  :valueset-url "http://hl7.org/fhir/ValueSet/observation-status"},
 Observation.subject
 {:zen/desc
  "The patient, or group of patients, location, or device this observation is about and into whose record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the `focus` element or the `code` itself specifies the actual focus of the observation.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Reference}},
 Observation.text
 {:zen/desc
  "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/Narrative}},
 Observation.valueQuantity
 {:confirms #{fhir/Quantity},
  :zen/tags #{zen/schema},
  :require #{:system :unit :value :code},
  :type zen/map,
  :zen/desc
  "Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.",
  :keys
  {:extension {:confirms #{Observation.valueQuantity.extension}},
   :comparator {:confirms #{Observation.valueQuantity.comparator}},
   :id {:confirms #{Observation.valueQuantity.id}},
   :system {:confirms #{Observation.valueQuantity.system}},
   :unit {:confirms #{Observation.valueQuantity.unit}},
   :code {:confirms #{Observation.valueQuantity.code}},
   :value {:confirms #{Observation.valueQuantity.value}}}},
 Observation.valueQuantity.code
 {:confirms #{fhir/code},
  :zen/tags #{zen/schema},
  :zen/desc
  "Coded responses from the common UCUM units for vital signs value set.",
  :const {:value "%"}},
 Observation.valueQuantity.comparator
 {aidbox-fx/valueset Observation.valueQuantity.comparator.valueset,
  :confirms #{fhir/code},
  :zen/tags #{zen/schema},
  :zen/desc
  "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value."},
 Observation.valueQuantity.comparator.valueset
 {:zen/tags
  #{aidbox-fx/valueset-definition
    aidbox-fx/legacy-fhir-valueset-definition},
  :engine :legacy-fhir-valueset,
  :valueset-url "http://hl7.org/fhir/ValueSet/quantity-comparator"},
 Observation.valueQuantity.extension
 {:zen/tags #{zen/schema},
  :type zen/vector,
  :every {:confirms #{Observation.valueQuantity.extension.*}},
  :slicing {:slices {}}},
 Observation.valueQuantity.extension.*
 {:confirms #{fhir/Extension},
  :zen/tags #{zen/schema},
  :zen/desc
  "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."},
 Observation.valueQuantity.id
 {:zen/desc
  "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.valueQuantity.system
 {:confirms #{fhir/uri},
  :zen/tags #{zen/schema},
  :zen/desc
  "The identification of the system that provides the coded form of the unit.",
  :const {:value "http://unitsofmeasure.org"}},
 Observation.valueQuantity.unit
 {:zen/desc "A human-readable form of the unit.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/string}},
 Observation.valueQuantity.value
 {:zen/desc
  "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
  :zen/tags #{zen/schema},
  :confirms #{fhir/decimal}}}